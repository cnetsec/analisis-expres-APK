name: 📱 Análisis Avanzado APK

on:
  workflow_dispatch:
    inputs:
      apk_name:
        description: '🗂️ Nombre del archivo APK (ej: app.apk)'
        required: true
        default: 'app.apk'
        type: string

jobs:
  analisis_completo:
    name: 🔍 Auditoría avanzada del APK
    runs-on: ubuntu-latest

    steps:
      # 1. Clonar el repositorio
      - name: 📥 Clonar repositorio
        uses: actions/checkout@v4

      # 2. Verificar que el APK existe
      - name: 📂 Verificar existencia del APK
        run: |
          echo "🔍 Buscando el archivo APK '${{ inputs.apk_name }}'..."
          if [ ! -f "${{ inputs.apk_name }}" ]; then
            echo "❌ APK no encontrado en el repositorio."
            exit 1
          fi
          echo "✅ APK '${{ inputs.apk_name }}' encontrado."

      # 3. Instalar dependencias (JADX, Semgrep, MobSFScan)
      - name: 🛠 Instalar dependencias
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y -qq openjdk-17-jdk unzip wget python3 python3-pip jq git
          wget -q https://github.com/skylot/jadx/releases/download/v1.4.7/jadx-1.4.7.zip
          unzip -o jadx-1.4.7.zip -d /opt/jadx
          pip3 install --quiet semgrep mobsfscan

      # 4. Decompilar el APK con JADX
      - name: 🧩 Decompilar APK (JADX)
        run: |
          echo "🧩 Decompilando el APK..."
          mkdir -p jadx_out
          /opt/jadx/bin/jadx "${{ inputs.apk_name }}" -d jadx_out || echo "⚠️ Error al decompilar con JADX"

      # 5. Análisis rápido: permisos, flags, URLs
      - name: 🔎 Análisis rápido (Manifest + Smali)
        run: |
          echo "📄 Resumen del análisis de '${{ inputs.apk_name }}'" > resumen_avanzado.txt
          echo -e "\n🔐 Permisos críticos:" >> resumen_avanzado.txt
          grep -i "uses-permission" jadx_out/resources/AndroidManifest.xml | \
          grep -Ei "INTERNET|SMS|CONTACTS|CALL|CAMERA|LOCATION|AUDIO|STORAGE" >> resumen_avanzado.txt || echo "✔️ Ningún permiso crítico detectado" >> resumen_avanzado.txt
          echo -e "\n⚠️ Flags inseguras:" >> resumen_avanzado.txt
          grep -iE "android:debuggable|allowBackup|usesCleartextTraffic" jadx_out/resources/AndroidManifest.xml >> resumen_avanzado.txt || echo "✔️ Flags seguras" >> resumen_avanzado.txt
          echo -e "\n🌐 URLs encontradas:" >> resumen_avanzado.txt
          grep -IorE 'https?://[a-zA-Z0-9./?=_\-]+' jadx_out/ | sort -u >> resumen_avanzado.txt || echo "✔️ No se detectaron URLs" >> resumen_avanzado.txt

      # 6. Ejecutar Semgrep con reglas MobSFScan
      - name: 🛡️ Análisis Semgrep
        run: |
          echo -e "\n🛡️ Semgrep (p/mobsfscan):" >> resumen_avanzado.txt
          semgrep --quiet --config=p/mobsfscan jadx_out --json > semgrep.json || true
          jq -r '.results[]? | .path + ": " + .extra.message' semgrep.json >> resumen_avanzado.txt || echo "✔️ Sin hallazgos relevantes" >> resumen_avanzado.txt

      # 7. Ejecutar MobSFScan
      - name: 📱 Análisis MobSFScan
        run: |
          echo -e "\n📱 MobSFScan:" >> resumen_avanzado.txt
          mobsfscan jadx_out --json > mobsfscan.json || true
          jq -r '.results[]? | .file_path + ": " + .title' mobsfscan.json >> resumen_avanzado.txt || echo "✔️ Sin hallazgos relevantes" >> resumen_avanzado.txt

      # 8. Mostrar resumen final en pantalla
      - name: 📄 Mostrar resumen
        run: |
          echo -e "\n📋 RESUMEN FINAL:"
          cat resumen_avanzado.txt

      # 9. Subir los artefactos (resumen y JSONs detallados)
      - name: 💾 Subir resultados como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: analisis-avanzado-apk
          path: |
            resumen_avanzado.txt
            semgrep.json
            mobsfscan.json
